{"description": "The goal is to minimize the price of an alloy produced from other alloys available on the market. There are AlloysOnMarket different alloys that can be bought to blend into the final product. The needed composition of the end alloy requires RequiredElements elements. Each alloy on the market has a known composition given by CompositionDataPercentage_{e,a, which indicates the percentage of element e in alloy a. The desired percentage of each element in the final blend is specified by DesiredBlendPercentage_e. Furthermore, each alloy a on the market comes with a price AlloyPrice_a. The objective of the optimization problem is to determine the quantity of each available alloy that should be used to achieve the desired blend percentages at the minimum total cost, without exceeding the availability of the alloys.", "data": {"AlloysOnMarket": ["A", "B", "C", "D", "E", "F", "G", "H", "I"], "RequiredElements": ["lead", " zinc", " tin"], "CompositionDataPercentage": {"A": [10, 10, 80], "B": [10, 30, 60], "C": [40, 50, 10], "D": [60, 30, 10], "E": [30, 30, 50], "F": [30, 40, 50], "G": [30, 20, 50], "H": [50, 40, 10], "I": [20, 30, 50]}, "DesiredBlendPercentage": [0.3, 0.3, 0.4], "AlloyPrice": {"A": 4.1, "B": 4.3, "C": 5.8, "D": 6.0, "E": 7.6, "F": 7.5, "G": 7.3, "H": 6.9, "I": 7.3}}, "obj": 4.98}
{"description": "The Car Selection Problem is a mixed integer programming model that aims to assign ParticipantNum participants to CarNum cars in a way that maximizes the total number of assignments. Each participant is interested in a subset of cars, represented by InterestMatrix_{p,c, where p and c index participants and cars, respectively. The objective is to find the optimal assignment of participants to cars that satisfies certain constraints.", "data": {"MaxParticipants": 10, "Participants": ["Ann R", "John R", "Victor W", "Lisa N", "Paul C", "Gregory W", "Vicitor C", "Gregory R", "Paul P", "Judith E"], "MaxCars": 10, "Cars": ["Ford", "Jaguar", "Mitsubishi", "Ferrari", "BMW", "Nissan", "Jeep", "Spyker", "VW Beetle", "Mini"], "PossibleAssignments": {"Ann R": "Spyker", "John R": "VW Beetle", "Victor W": "Ferrari", "Lisa N": "Mini", "Paul C": "VW Beetle", "Gregory W": "VW Beetle", "Victor C": "Mini", "Gregory R": "Jeep", "Paul P": "VW Beetle", "Judith E": "VW Beetle"}}, "obj": 10}
{"description": "The Aircraft Assignment Problem is a mathematical programming model that aims to assign TotalAircraft aircraft to TotalRoutes routes in order to minimize the total cost while satisfying availability and demand constraints. The availability for each aircraft i is Availability_i and it represents the maximum number of routes that the aircraft can be assigned to. The demand for each route j is Demand_j and it denotes the number of aircraft required to fulfill the passenger or cargo needs of the route. The capability of each aircraft i for each route j is given by Capacity_{i,j and it defines whether the aircraft can service the route, considering factors such as range, size, and suitability. Finally, Cost_{i,j represents the cost of assigning aircraft i to route j, which includes operational, fuel, and potential opportunity costs.", "data": {"AircraftNum": 5, "RouteNum": 5, "Availability": [10, 19, 25, 15], "Demand": [250, 120, 180, 90, 600], "Capabilities": [[16, 15, 28, 23, 81], [0, 10, 14, 15, 57], [0, 5, 0, 7, 29], [9, 11, 22, 17, 55], [1, 1, 1, 1, 0]], "Costs": [[18, 21, 18, 16, 10], [0, 15, 16, 14, 9], [0, 10, 0, 9, 6], [17, 16, 17, 15, 10], [13, 13, 7, 7, 0]]}, "obj": 1008}
{"description": "The capacitated warehouse location problem is the problem of locating NumberOfLocations warehouses which have to service NumberOfCustomers customers, at minimum Cost. Each customer has an associated demand CustomerDemand. There are constraints on the total demand that can be met from a warehouse, as specified by WarehouseCapacity. Costs are incurred when allocating service to customers from warehouses ServiceAllocationCost, and warehouses have a fixed operating Cost WarehouseFixedCost. Additionally, there is a lower limit MinimumDemandFromWarehouse on the amount of demand that a warehouse must meet if it is opened, as well as constraints on the minimum MinimumOpenWarehouses and maximum MaximumOpenWarehouses number of warehouses that can be operational.", "data": {"NumberOfLocations": 10, "NumberOfCustomers": 10, "Demand": [1131, 1726, 416, 353, 1677, 1514, 991, 1755, 789, 850], "AllocationCost": [{"CustomerId": 1, "WarehouseId": 1, "Cost": 31588.888557}, {"CustomerId": 1, "WarehouseId": 2, "Cost": 107868.737845}, {"CustomerId": 1, "WarehouseId": 3, "Cost": 97370.578802}, {"CustomerId": 1, "WarehouseId": 4, "Cost": 59321.853904}, {"CustomerId": 1, "WarehouseId": 5, "Cost": 65248.416992}, {"CustomerId": 1, "WarehouseId": 6, "Cost": 100823.385772}, {"CustomerId": 1, "WarehouseId": 7, "Cost": 70018.827651}, {"CustomerId": 1, "WarehouseId": 8, "Cost": 82619.81491}, {"CustomerId": 1, "WarehouseId": 9, "Cost": 7227.27495}, {"CustomerId": 1, "WarehouseId": 10, "Cost": 36172.211519}, {"CustomerId": 2, "WarehouseId": 1, "Cost": 3560.963837}, {"CustomerId": 2, "WarehouseId": 2, "Cost": 103837.109987}, {"CustomerId": 2, "WarehouseId": 3, "Cost": 48836.848155}, {"CustomerId": 2, "WarehouseId": 4, "Cost": 81607.664783}, {"CustomerId": 2, "WarehouseId": 5, "Cost": 114917.088555}, {"CustomerId": 2, "WarehouseId": 6, "Cost": 29631.431942}, {"CustomerId": 2, "WarehouseId": 7, "Cost": 94174.892571}, {"CustomerId": 2, "WarehouseId": 8, "Cost": 108714.443602}, {"CustomerId": 2, "WarehouseId": 9, "Cost": 51127.017474}, {"CustomerId": 2, "WarehouseId": 10, "Cost": 37283.193587}, {"CustomerId": 3, "WarehouseId": 1, "Cost": 51577.453501}, {"CustomerId": 3, "WarehouseId": 2, "Cost": 116992.206654}, {"CustomerId": 3, "WarehouseId": 3, "Cost": 6289.315624}, {"CustomerId": 3, "WarehouseId": 4, "Cost": 38074.616299}, {"CustomerId": 3, "WarehouseId": 5, "Cost": 107552.199148}, {"CustomerId": 3, "WarehouseId": 6, "Cost": 102398.620849}, {"CustomerId": 3, "WarehouseId": 7, "Cost": 44938.604465}, {"CustomerId": 3, "WarehouseId": 8, "Cost": 34851.420212}, {"CustomerId": 3, "WarehouseId": 9, "Cost": 76341.275927}, {"CustomerId": 3, "WarehouseId": 10, "Cost": 64365.094356}, {"CustomerId": 4, "WarehouseId": 1, "Cost": 92934.325847}, {"CustomerId": 4, "WarehouseId": 2, "Cost": 20508.727999}, {"CustomerId": 4, "WarehouseId": 3, "Cost": 16288.527439}, {"CustomerId": 4, "WarehouseId": 4, "Cost": 39755.432805}, {"CustomerId": 4, "WarehouseId": 5, "Cost": 41383.1574}, {"CustomerId": 4, "WarehouseId": 6, "Cost": 119400.379588}, {"CustomerId": 4, "WarehouseId": 7, "Cost": 44274.364232}, {"CustomerId": 4, "WarehouseId": 8, "Cost": 68375.391674}, {"CustomerId": 4, "WarehouseId": 9, "Cost": 82500.012949}, {"CustomerId": 4, "WarehouseId": 10, "Cost": 90229.054945}, {"CustomerId": 5, "WarehouseId": 1, "Cost": 33487.441052}, {"CustomerId": 5, "WarehouseId": 2, "Cost": 108107.693817}, {"CustomerId": 5, "WarehouseId": 3, "Cost": 49936.283258}, {"CustomerId": 5, "WarehouseId": 4, "Cost": 9840.359307}, {"CustomerId": 5, "WarehouseId": 5, "Cost": 78568.595392}, {"CustomerId": 5, "WarehouseId": 6, "Cost": 88693.339609}, {"CustomerId": 5, "WarehouseId": 7, "Cost": 37321.542247}, {"CustomerId": 5, "WarehouseId": 8, "Cost": 46623.927892}, {"CustomerId": 5, "WarehouseId": 9, "Cost": 33349.413093}, {"CustomerId": 5, "WarehouseId": 10, "Cost": 105854.117417}, {"CustomerId": 6, "WarehouseId": 1, "Cost": 93735.97464}, {"CustomerId": 6, "WarehouseId": 2, "Cost": 45040.117483}, {"CustomerId": 6, "WarehouseId": 3, "Cost": 110137.141217}, {"CustomerId": 6, "WarehouseId": 4, "Cost": 91800.077199}, {"CustomerId": 6, "WarehouseId": 5, "Cost": 64834.849792}, {"CustomerId": 6, "WarehouseId": 6, "Cost": 57732.609634}, {"CustomerId": 6, "WarehouseId": 7, "Cost": 115854.697184}, {"CustomerId": 6, "WarehouseId": 8, "Cost": 88474.504742}, {"CustomerId": 6, "WarehouseId": 9, "Cost": 80717.638752}, {"CustomerId": 6, "WarehouseId": 10, "Cost": 54439.513296}, {"CustomerId": 7, "WarehouseId": 1, "Cost": 12232.057661}, {"CustomerId": 7, "WarehouseId": 2, "Cost": 75340.879401}, {"CustomerId": 7, "WarehouseId": 3, "Cost": 64793.246317}, {"CustomerId": 7, "WarehouseId": 4, "Cost": 100741.019471}, {"CustomerId": 7, "WarehouseId": 5, "Cost": 52445.914924}, {"CustomerId": 7, "WarehouseId": 6, "Cost": 56057.03179}, {"CustomerId": 7, "WarehouseId": 7, "Cost": 32920.013718}, {"CustomerId": 7, "WarehouseId": 8, "Cost": 35984.339293}, {"CustomerId": 7, "WarehouseId": 9, "Cost": 78789.709123}, {"CustomerId": 7, "WarehouseId": 10, "Cost": 7978.808146}, {"CustomerId": 8, "WarehouseId": 1, "Cost": 83524.30349}, {"CustomerId": 8, "WarehouseId": 2, "Cost": 37071.341915}, {"CustomerId": 8, "WarehouseId": 3, "Cost": 103294.114773}, {"CustomerId": 8, "WarehouseId": 4, "Cost": 65850.395088}, {"CustomerId": 8, "WarehouseId": 5, "Cost": 95886.258204}, {"CustomerId": 8, "WarehouseId": 6, "Cost": 97664.112409}, {"CustomerId": 8, "WarehouseId": 7, "Cost": 113993.237418}, {"CustomerId": 8, "WarehouseId": 8, "Cost": 1255.335492}, {"CustomerId": 8, "WarehouseId": 9, "Cost": 75996.524756}, {"CustomerId": 8, "WarehouseId": 10, "Cost": 78237.247615}, {"CustomerId": 9, "WarehouseId": 1, "Cost": 72243.748422}, {"CustomerId": 9, "WarehouseId": 2, "Cost": 30228.018914}, {"CustomerId": 9, "WarehouseId": 3, "Cost": 14538.872489}, {"CustomerId": 9, "WarehouseId": 4, "Cost": 3299.290815}, {"CustomerId": 9, "WarehouseId": 5, "Cost": 37038.444164}, {"CustomerId": 9, "WarehouseId": 6, "Cost": 20886.554836}, {"CustomerId": 9, "WarehouseId": 7, "Cost": 103144.184257}, {"CustomerId": 9, "WarehouseId": 8, "Cost": 74139.265045}, {"CustomerId": 9, "WarehouseId": 9, "Cost": 38305.07222}, {"CustomerId": 9, "WarehouseId": 10, "Cost": 32572.47456}, {"CustomerId": 10, "WarehouseId": 1, "Cost": 1085.63855}, {"CustomerId": 10, "WarehouseId": 2, "Cost": 25032.761408}, {"CustomerId": 10, "WarehouseId": 3, "Cost": 5450.739172}, {"CustomerId": 10, "WarehouseId": 4, "Cost": 116671.186401}, {"CustomerId": 10, "WarehouseId": 5, "Cost": 43970.742092}, {"CustomerId": 10, "WarehouseId": 6, "Cost": 119697.13499}, {"CustomerId": 10, "WarehouseId": 7, "Cost": 74177.315853}, {"CustomerId": 10, "WarehouseId": 8, "Cost": 119954.150785}, {"CustomerId": 10, "WarehouseId": 9, "Cost": 91957.843687}, {"CustomerId": 10, "WarehouseId": 10, "Cost": 36573.325732}], "Capacity": 5000, "LowerLimitOnDemand": 0, "LowerLimitOfOpenWarehouses": 0, "UpperLimitOfOpenWarehouses": 10, "FixedCost": 7500.0}, "obj": 151119}
{"description": "The Vehicle Routing Problem with Time Windows (VRPTW) involves the distribution of goods between depots and customers using VehicleCount vehicles. Each vehicle has to supply CustomerCount customers, and has a limited capacity, VehicleCapacity_i, for each vehicle i. Each customer, j, has an associated demand, CustomerDemand_j, that must be satisfied within the customer-specific time window, defined by the lower and upper bounds, CustomerLBTW_j and CustomerUBTW_j, respectively. The CustomerDistance_{i,j parameter represents the distance between customer i to customer j, and CustomerServiceTime_j denotes the service time for customer j.", "data": {"CustomersNumber": 25, "Demand": [0, 10, 7, 13, 19, 26, 3, 5, 9, 16, 16, 12, 19, 23, 20, 8, 19, 2, 12, 17, 9, 11, 18, 29, 3, 6], "LBTW": [0, 0, 0, 0, 139, 0, 89, 0, 85, 87, 114, 57, 0, 149, 32, 51, 65, 147, 77, 66, 116, 0, 87, 58, 143, 156], "UBTW": [230, 204, 202, 197, 169, 199, 119, 198, 115, 117, 144, 87, 205, 179, 62, 81, 95, 177, 107, 96, 146, 201, 117, 88, 173, 186], "XCoord": [35, 41, 35, 55, 55, 15, 25, 20, 10, 55, 30, 20, 50, 30, 15, 30, 10, 5, 20, 15, 45, 45, 45, 55, 65, 65], "YCoord": [35, 49, 17, 45, 20, 30, 30, 50, 43, 60, 60, 65, 35, 25, 10, 5, 20, 30, 40, 60, 65, 20, 10, 5, 35, 20], "Distance": [[0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "ServiceTime": [0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], "TravelTime": [[0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "Capacity": 200, "M": 1000}, "obj": 578.3}
{"description": "The Aircraft Landing Problem (ALP) is the problem of deciding a landing time on an appropriate runway for each aircraft in a given set of TotalAircrafts aircraft such that each aircraft lands within a predetermined time window defined by an EarliestLandingTime and a LatestLandingTime; and separation criteria between the landing of an aircraft i, and the landing of all successive aircraft j, are respected, determined by SeparationTimeMatrix. Each aircraft has a TargetLandingTime, and penalties are incurred for landing after (PenaltyTimeAfterTarget) or before (PenaltyTimeBeforeTarget) this target time.", "data": {"TotalAircrafts": 10, "EarliestLanding": [129, 195, 89, 96, 110, 120, 124, 126, 135, 160], "LatestLanding": [559, 744, 510, 521, 555, 576, 577, 573, 591, 657], "TargetLanding": [155, 258, 98, 106, 123, 135, 138, 140, 150, 180], "PenaltyAfterTarget": [10, 10, 30, 30, 30, 30, 30, 30, 30, 30], "PenaltyBeforeTarget": [10, 10, 30, 30, 30, 30, 30, 30, 30, 30], "SeperationTime": [[99999, 15, 15, 15, 15, 15, 15, 15, 15, 15], [15, 99999, 15, 15, 15, 15, 15, 15, 15, 15], [15, 15, 99999, 8, 8, 8, 8, 8, 8, 8], [15, 15, 8, 99999, 8, 8, 8, 8, 8, 8], [15, 15, 8, 8, 99999, 8, 8, 8, 8, 8], [15, 15, 8, 8, 8, 99999, 8, 8, 8, 8], [15, 15, 8, 8, 8, 8, 99999, 8, 8, 8], [15, 15, 8, 8, 8, 8, 8, 99999, 8, 8], [15, 15, 8, 8, 8, 8, 8, 8, 99999, 8], [15, 15, 8, 8, 8, 8, 8, 8, 8, 99999]]}, "obj": 700}
