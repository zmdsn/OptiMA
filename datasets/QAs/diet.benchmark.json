{
  "questions": [
    {
      "QUESTION": "What if I have an aversion to eating salads?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if salad doesn't appeal to me?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What should I do if I don't enjoy eating salads?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if salads don't satisfy my taste buds?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I find salads unappetizing?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I'm not a fan of salads?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "If I'm not a fan of hot dogs, what should I do?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What are my options if I dislike hot dogs?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "In case I don't enjoy hot dogs, what can I do?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What happens if hot dogs don't appeal to me?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if hamburgers don't appeal to me?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What happens if hamburgers aren't to my liking?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What happens if I dislike hamburgers?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if hamburgers aren't my preference?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What would be the case if I'm not fond of hamburgers?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I'm not a fan of hamburgers?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't enjoy eating hamburgers?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have an aversion to fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if fries aren't my preference?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "In case I'm not a fan of fries, what if?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Suppose I don't enjoy fries, what then?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I'm not keen on fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "If I don't find fries appetizing, what should I do?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What can I do if I don't like fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What happens if I dislike fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if fries don't appeal to me?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What can be done if macaroni doesn't satisfy my palate?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "How do I handle not being a fan of macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if macaroni isn't my type of food?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "If I'm not fond of macaroni, what should I do?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What other options exist if macaroni doesn't appeal to me?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "In the case that I don't enjoy macaroni, then what?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is there an issue if macaroni isn't my preferred dish?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Suppose macaroni doesn't suit my taste buds?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What should I do if I dislike eating chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible that I may not be fond of chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if the taste of chicken doesn't appeal to me?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if chicken is not my preferred food?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid chicken if it is not to my liking?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "How should I approach chicken if it's not my favorite food?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it strange if I don't find pizza appetizing?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it a problem if I'm not a pizza lover?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Are there alternatives if I am not a fan of pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "How can I handle a situation where pizza is not my preference?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What do I do if I dislike the taste of pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What should I do if pizza doesn't appeal to me?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Assuming I don't enjoy milk, what can be done?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What's the situation if milk isn't to my liking?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What's the alternative if I dislike milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What happens if milk isn't my preference?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "If milk doesn't appeal to me, then what?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "In case I am not fond of milk, what occurs?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "MACRO GEN QUESTION": "What if I don't like milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Is there an option to not have salad?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can salad be skipped?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can salad be avoided?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to not eat salad?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can one do without salad?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I successfully refrain from having hot dogs?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I manage to stay away from consuming hot dogs?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible for me to steer clear of hot dogs?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is there a way for me to bypass eating hot dogs?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I bypass having a hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I abstain from consuming a hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to avoid eating hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Is there a way to not eat a hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it feasible to bypass fries in my diet?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Do I have the option to not eat fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I opt out of having fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I choose to not consume fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can fries be skipped in my meal?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to stay away from fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to steer clear of macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can one manage to not consume macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is there a way to dodge macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can macaroni be bypassed?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to avoid chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is evading chicken an option for me?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can chicken consumption be bypassed?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Am I able to steer clear of chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I successfully bypass the temptation of pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible for me to abstain from eating pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is there a way for me to dodge pizza completely?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I achieve pizza avoidance in my life?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it feasible for me to evade indulging in pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I manage to stay away from pizza consumption?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I choose to not have milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can milk be excluded from my diet?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Is it possible to stay away from milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Is it an option to not consume milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "MACRO GEN QUESTION": "Can I avoid milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "May I receive 7 extra salad units?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could I request an additional 7 units of salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I please have an extra 7 units of salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to add 7 more units of salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can 7 units of salad be added to my order?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is obtaining 7 more units of salad an option?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be alright to get 7 additional portions of salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 7 extra units of salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I request 2 more units of hot dogs?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be allowed to have 2 more hot dogs?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to get 2 additional hot dogs?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can you add 2 extra hot dogs to my order?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Are 2 extra hot dogs an option for me?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could you provide 2 extra hot dogs, please?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Am I allowed to get 2 more units of hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == buy[\"hamburger\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Is it permissible to have an additional 2 units of hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == buy[\"hamburger\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can 2 extra units of hamburger be added to my order?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == buy[\"hamburger\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "May I request for 2 supplementary units of hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == buy[\"hamburger\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 2 extra units of hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can you provide me with an additional 9 units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can 9 additional units of fries be included in my order?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I have an extra 9 units of fries, please?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to obtain 9 more units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could I request 9 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Am I able to have an additional 9 units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be feasible to receive 9 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could you add 9 more units of fries to my order?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 9 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I have 5 extra servings of fries, please?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to obtain 5 additional units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be feasible to add 5 more units of fries to my order?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it an option to have 5 extra portions of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could I request 5 supplementary units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can you provide 5 more units of fries, please?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 5 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Am I allowed to request 6 more units of macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can 6 more units of macaroni be added to my order?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to get 6 additional units of macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be okay to have an extra 6 units of macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could you provide me with 6 extra units of macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I please have 6 extra units of macaroni in my order?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to add 8 more chicken units to my order?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can you provide an additional 8 units of chicken, please?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I have an increase of 8 units in chicken, please?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could I request 8 extra units of the chicken?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is acquiring 8 more chicken units an option?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Am I able to receive 8 supplementary chicken units?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 8 extra units of chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can 3 more pieces of pizza be added to my order?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Are 3 extra pizza units available for me?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I request a supplementary 3 units of pizza?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Would it be okay to request an extra 3 slices of pizza?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I add on 3 more units of pizza to my order?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to obtain 3 additional pizza slices?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 3 extra units of pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can you give me 6 additional units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it possible to obtain 6 additional units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Could you provide me with 6 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I request 6 more units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Am I allowed to receive 6 more units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I request an extra 6 units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is it alright for me to have 6 additional units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "May I have an extra 6 units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Is acquiring 6 additional milk units an option?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "Is it possible to obtain 6 additional units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "Could you supply me with 6 extra units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "Would it be feasible to get an extra 6 units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "May I request an additional 6 units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "Can 6 more units of milk be provided?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "MACRO GEN QUESTION": "Can I have 6 extra units of milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "What is the situation if I own 7 salads?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What might unfold if I were to have 7 salads?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What could be the case if 7 salads were in my hands?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What happens if I possess 7 salads?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What occurs if I have 7 salads at my disposal?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What if there are 7 salads in my possession?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 7 salad?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What would happen if I possess 5 hot dogs?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "If I were to have 5 hot dogs, what could occur?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What are the implications of having 5 hot dogs in my possession?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Imagine having 5 hot dogs; what would be the outcome?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Can you ponder a scenario where I have 5 hot dogs and what it might entail?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What could potentially happen if I own 5 hot dogs?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 hot dog?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What occurs if I own just 1 hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 1,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 1, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 1 hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What would happen if I possess 1 hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 1,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 1, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 1 hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "If I have a single hamburger, what then?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 1,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 1, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 1 hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What's the scenario if I've got 1 hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 1,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 1, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 1 hamburger?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What about a situation where I hold 5 fried potato strips?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "How would it be if I own 5 individual French fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I possess 5 pieces of fried potato?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What's the scenario when I've got 5 crispy potato sticks?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What happens if there are 5 fries in my possession?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What would happen if I possess 3 fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What's the scenario with 3 fries in hand?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Envision 3 fries with me, what's next?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What occurs when one has 3 fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Imagine having 3 fries, what then?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What is the consequence of having 3 fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 3 fries?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Suppose I acquired 6 macaroni; what next?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 6 macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What would be the case if I possessed 6 macaroni pieces?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 6 macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Can you imagine a scenario where I have 6 macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 6 macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What are the possibilities if 6 macaroni are in my possession?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 6 macaroni?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if there are 4 chickens in my possession?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What is the outcome of having 4 chickens?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What would happen if I possess 4 chickens?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Suppose I own 4 chickens, then what?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What can I expect if I have 4 chickens?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What does having 4 chickens entail?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 4 chicken?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What would happen if I possessed two pizzas?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Given that I acquire 2 pizzas, what will take place?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Envisioning a situation with me having 2 pizzas, what transpires?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "In a scenario where I own 2 pizzas, what might unfold?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "If I were to have 2 pizzas, what would occur?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Imagine I have 2 pizzas - what then?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Assuming I have a pair of pizzas, what can I expect?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 2 pizza?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Assuming I have 5 milk, what could happen?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What would be the case if 5 milk are in my possession?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What are the possible scenarios with 5 units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I own 5 milk bottles?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What would happen if I possess 5 milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "If I were to have 5 milk, what might be the situation?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "In the event of having 5 milk, what are potential outcomes?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "MACRO GEN QUESTION": "What if I have 5 milk?",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like salad?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like hot dog?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I don't like milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "338720d1a5da04ffe654d0dfd37788ce1137fb5325c5ccf26bbcbfcd169c5945",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can I avoid salad?",
      "VALUE-FOOD": "salad",
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid hot dog?",
      "VALUE-FOOD": "hot dog",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid hamburger?",
      "VALUE-FOOD": "hamburger",
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid fries?",
      "VALUE-FOOD": "fries",
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid macaroni?",
      "VALUE-FOOD": "macaroni",
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid chicken?",
      "VALUE-FOOD": "chicken",
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid pizza?",
      "VALUE-FOOD": "pizza",
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "Can I avoid milk?",
      "VALUE-FOOD": "milk",
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 0, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "edd58e67b8c85ea27791169755d290c54c5095a7e30b8d68ae0a1f5cb984d703",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can I have 7 extra units of salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == buy[\"salad\"].X + 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 2 extra units of hot dog?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == buy[\"hot dog\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 2 extra units of hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == buy[\"hamburger\"].X + 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "Can I have 9 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 9,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 9, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 5 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 6 extra units of macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == buy[\"macaroni\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 8 extra units of chicken?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 8,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == buy[\"chicken\"].X + 8, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 3 extra units of pizza?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == buy[\"pizza\"].X + 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 6 extra units of fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == buy[\"fries\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', '_']"
    },
    {
      "QUESTION": "Can I have 6 extra units of milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == buy[\"milk\"].X + 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "136074556b5dffe7707e2f30dd9f1ccbf08147752e6d7c43cac3b57d4f9f4b28",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 7 salad?",
      "VALUE-FOOD": "salad",
      "VALUE-COUNT": 7,
      "CONSTRAINT CODE": "m.addConstr(buy[\"salad\"] == 7, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What if I have 5 hot dog?",
      "VALUE-FOOD": "hot dog",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hot dog\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 1 hamburger?",
      "VALUE-FOOD": "hamburger",
      "VALUE-COUNT": 1,
      "CONSTRAINT CODE": "m.addConstr(buy[\"hamburger\"] == 1, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 5 fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 3 fries?",
      "VALUE-FOOD": "fries",
      "VALUE-COUNT": 3,
      "CONSTRAINT CODE": "m.addConstr(buy[\"fries\"] == 3, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 6 macaroni?",
      "VALUE-FOOD": "macaroni",
      "VALUE-COUNT": 6,
      "CONSTRAINT CODE": "m.addConstr(buy[\"macaroni\"] == 6, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 4 chicken?",
      "VALUE-FOOD": "chicken",
      "VALUE-COUNT": 4,
      "CONSTRAINT CODE": "m.addConstr(buy[\"chicken\"] == 4, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_']"
    },
    {
      "QUESTION": "What if I have 2 pizza?",
      "VALUE-FOOD": "pizza",
      "VALUE-COUNT": 2,
      "CONSTRAINT CODE": "m.addConstr(buy[\"pizza\"] == 2, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', '_', 'limit_dairy']"
    },
    {
      "QUESTION": "What if I have 5 milk?",
      "VALUE-FOOD": "milk",
      "VALUE-COUNT": 5,
      "CONSTRAINT CODE": "m.addConstr(buy[\"milk\"] == 5, \"_\")",
      "TYPE": "buy-limits",
      "raw_question_hash": "86e20f2bd5f1d968bcd7af85589bc06801095abe02378888de5e3d4e6c960007",
      "GT EXEC RESULT": "infeasible\nConflicting Constraints:\n['calories', 'protein', 'sodium', 'limit_dairy']"
    }
  ],
  "code_path": "/OptiGuide/benchmark/application/diet.py"
}